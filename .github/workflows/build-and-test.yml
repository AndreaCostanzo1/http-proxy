name: Build and Test

on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      go-cache: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version from go.mod
        id: extract-go-version
        run: |
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')
          echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_ENV
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build the project
        run: go build ./...

      - name: Save build output
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build

  test_and_coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Restore build output
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Run tests
        id: test
        run: set -o pipefail && go test -v ./... | tee tests.out

      - name: Save test results
        if: failure()
        run: cat tests.out

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests.out

      - name: Print test failure simplified
        if: failure()
        run: go test ./...

      - name: Run coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out | grep total | awk '{print $3}'
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
            echo "Coverage is below 90%"
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out



